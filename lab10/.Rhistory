# Your code here
library(UsingR)
head("nba.draft")
#sample(nba.draft$Team, 1, prob=Balls)
# Your code here
library(UsingR)
summary("nba.draft")
#sample(nba.draft$Team, 1, prob=Balls)
# Your code here
library(UsingR)
data(nba.draft)
sample(nba.draft$Team, 1, prob=Balls)
View(nba.draft)
# Your code here
library(UsingR)
data(nba.draft)
sample(nba.draft$Team, 1, prob=nba.draft$Balls)
# Your code here
library(UsingR)
sample(nba.draft$Team, 1, prob=nba.draft$Balls)
# Your code here
library(UsingR)
sample(nba.draft$Team, 1, prob=nba.draft$Balls)
#chicago was the first team selected, and it took _ trials until Golden State was chosen
# Your code here
library(UsingR)
sample(nba.draft$Team, 1, prob=nba.draft$Balls)
#chicago was the first team selected, and it took _ trials until Golden State was chosen
# Your code here
library(UsingR)
sample(nba.draft$Team, 1, prob=nba.draft$Balls)
#chicago was the first team selected, and it took _ trials until Golden State was chosen
# Your code here
p0 = qnorm(0, mean=0, sd=1)
# Your code here
p0 = qnorm(0, mean=0, sd=1)
p20 = qnorm(.2, mean=0, sd=1)
p40 = qnorm(.4, mean=0, sd=1)
p60 = qnorm(.6, mean=0, sd=1)
p80 = qnorm(.8, mean=0, sd=1)
p100 = qnorm(1, mean=0, sd=1)
# Your code here
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
norm_q3 <- seq((1.5-3*(.5*sqrt(3))), (1.5+3*(.5*sqrt(3))), length = 1000)
norm_pdf3 <- dnorm(norm_q3, mean = 1.5, sd = .5*sqrt(3))
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
#20 flips. n=20, mean=10, sd=.5sqrt(20)
# Your code here
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
mean3 = .5*3
sd3 = .5*sqrt(3)
norm_q3 <- seq((mean3-3*(sd3)), (mean3+3*(sd3)), length = 1000)
norm_pdf3 <- dnorm(norm_q3, mean = mean3, sd = sd3)
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
mean5 = .5*5
sd5 = .5*sqrt(5)
norm_q5 <- seq((mean5-3*(sd5)), (mean5+3*(sd5)), length = 1000)
norm_pdf5 <- dnorm(norm_q5, mean = mean5, sd = sd5)
#20 flips. n=20, mean=10, sd=.5sqrt(20)
mean20 = .5*20
sd20 = .5*sqrt(20)
norm_q20 <- seq((mean20-3*(sd20)), (mean20+3*(sd20)), length = 1000)
norm_pdf20 <- dnorm(norm_q20, mean = mean20, sd = sd20)
# Your code here
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
mean3 = .5*3
sd3 = .5*sqrt(3)
norm_q3 <- seq((mean3-3*(sd3)), (mean3+3*(sd3)), length = 1000)
norm_pdf3 <- dnorm(norm_q3, mean = mean3, sd = sd3)
plot_pmf(norm_q3, norm_pdf3)
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
mean5 = .5*5
sd5 = .5*sqrt(5)
norm_q5 <- seq((mean5-3*(sd5)), (mean5+3*(sd5)), length = 1000)
norm_pdf5 <- dnorm(norm_q5, mean = mean5, sd = sd5)
#20 flips. n=20, mean=10, sd=.5sqrt(20)
mean20 = .5*20
sd20 = .5*sqrt(20)
norm_q20 <- seq((mean20-3*(sd20)), (mean20+3*(sd20)), length = 1000)
norm_pdf20 <- dnorm(norm_q20, mean = mean20, sd = sd20)
plot_pmf <- function(q, p) {
# This will plot a series of horizontal lines at q with height p, setting
# the y limits to a reasonable heights
plot(q, p, type = "h", xlab = "x", ylab = "probability", main = "pmf", ylim = c(0,
max(p) + 0.1))
# Usually these plots have a dot at the end of the line; the point function
# will add these dots to the plot created above
points(q, p, pch = 16, cex = 2)
}
# Your code here
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
mean3 = .5*3
sd3 = .5*sqrt(3)
norm_q3 <- seq((mean3-3*(sd3)), (mean3+3*(sd3)), length = 1000)
norm_pdf3 <- dnorm(norm_q3, mean = mean3, sd = sd3)
plot_pmf(norm_q3, norm_pdf3)
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
mean5 = .5*5
sd5 = .5*sqrt(5)
norm_q5 <- seq((mean5-3*(sd5)), (mean5+3*(sd5)), length = 1000)
norm_pdf5 <- dnorm(norm_q5, mean = mean5, sd = sd5)
#20 flips. n=20, mean=10, sd=.5sqrt(20)
mean20 = .5*20
sd20 = .5*sqrt(20)
norm_q20 <- seq((mean20-3*(sd20)), (mean20+3*(sd20)), length = 1000)
norm_pdf20 <- dnorm(norm_q20, mean = mean20, sd = sd20)
# Your code here
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
mean3 = .5*3
sd3 = .5*sqrt(3)
norm_q3 <- seq((mean3-3*(sd3)), (mean3+3*(sd3)), length = 100)
norm_pdf3 <- dnorm(norm_q3, mean = mean3, sd = sd3)
plot_pmf(norm_q3, norm_pdf3)
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
mean5 = .5*5
sd5 = .5*sqrt(5)
norm_q5 <- seq((mean5-3*(sd5)), (mean5+3*(sd5)), length = 1000)
norm_pdf5 <- dnorm(norm_q5, mean = mean5, sd = sd5)
#20 flips. n=20, mean=10, sd=.5sqrt(20)
mean20 = .5*20
sd20 = .5*sqrt(20)
norm_q20 <- seq((mean20-3*(sd20)), (mean20+3*(sd20)), length = 1000)
norm_pdf20 <- dnorm(norm_q20, mean = mean20, sd = sd20)
# Your code here
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
mean3 = .5*3
sd3 = .5*sqrt(3)
norm_q3 <- seq((mean3-3*(sd3)), (mean3+3*(sd3)), length = 50)
norm_pdf3 <- dnorm(norm_q3, mean = mean3, sd = sd3)
plot_pmf(norm_q3, norm_pdf3)
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
mean5 = .5*5
sd5 = .5*sqrt(5)
norm_q5 <- seq((mean5-3*(sd5)), (mean5+3*(sd5)), length = 1000)
norm_pdf5 <- dnorm(norm_q5, mean = mean5, sd = sd5)
#20 flips. n=20, mean=10, sd=.5sqrt(20)
mean20 = .5*20
sd20 = .5*sqrt(20)
norm_q20 <- seq((mean20-3*(sd20)), (mean20+3*(sd20)), length = 1000)
norm_pdf20 <- dnorm(norm_q20, mean = mean20, sd = sd20)
# Your code here
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
mean3 = .5*3
sd3 = .5*sqrt(3)
norm_q3 <- seq((mean3-3*(sd3)), (mean3+3*(sd3)), length = 30)
norm_pdf3 <- dnorm(norm_q3, mean = mean3, sd = sd3)
plot_pmf(norm_q3, norm_pdf3)
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
mean5 = .5*5
sd5 = .5*sqrt(5)
norm_q5 <- seq((mean5-3*(sd5)), (mean5+3*(sd5)), length = 1000)
norm_pdf5 <- dnorm(norm_q5, mean = mean5, sd = sd5)
#20 flips. n=20, mean=10, sd=.5sqrt(20)
mean20 = .5*20
sd20 = .5*sqrt(20)
norm_q20 <- seq((mean20-3*(sd20)), (mean20+3*(sd20)), length = 1000)
norm_pdf20 <- dnorm(norm_q20, mean = mean20, sd = sd20)
# Your code here
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
mean3 = .5*3
sd3 = .5*sqrt(3)
norm_q3 <- seq((mean3-3*(sd3)), (mean3+3*(sd3)), length = 30)
norm_pdf3 <- dnorm(norm_q3, mean = mean3, sd = sd3)
plot_pmf(norm_q3, norm_pdf3)
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
mean5 = .5*5
sd5 = .5*sqrt(5)
norm_q5 <- seq((mean5-3*(sd5)), (mean5+3*(sd5)), length = 30)
norm_pdf5 <- dnorm(norm_q5, mean = mean5, sd = sd5)
plot_pmf(norm_q5, norm_pdf5)
#20 flips. n=20, mean=10, sd=.5sqrt(20)
mean20 = .5*20
sd20 = .5*sqrt(20)
norm_q20 <- seq((mean20-3*(sd20)), (mean20+3*(sd20)), length = 30)
norm_pdf20 <- dnorm(norm_q20, mean = mean20, sd = sd20)
plot_pmf(norm_q20, norm_pdf20)
# Your code here
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
mean3 = .5*3
sd3 = .5*sqrt(3)
norm_q3 <- 0:3
norm_pdf3 <- dnorm(norm_q3, mean = mean3, sd = sd3)
plot_pmf(norm_q3, norm_pdf3)
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
mean5 = .5*5
sd5 = .5*sqrt(5)
norm_q5 <- 0:5
norm_pdf5 <- dnorm(norm_q5, mean = mean5, sd = sd5)
plot_pmf(norm_q5, norm_pdf5)
#20 flips. n=20, mean=10, sd=.5sqrt(20)
mean20 = .5*20
sd20 = .5*sqrt(20)
norm_q20 <- 0:20
norm_pdf20 <- dnorm(norm_q20, mean = mean20, sd = sd20)
plot_pmf(norm_q20, norm_pdf20)
# Your code here
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
mean3 = .5*3
sd3 = .5*sqrt(3)
norm_q3 <- 0:3
norm_pdf3 <- dnorm(norm_q3, mean = mean3, sd = sd3)
plot_pmf(norm_q3, norm_pdf3)
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
mean5 = .5*5
sd5 = .5*sqrt(5)
norm_q5 <- 0:5
norm_pdf5 <- dnorm(norm_q5, mean = mean5, sd = sd5)
plot_pmf(norm_q5, norm_pdf5)
#20 flips. n=20, mean=10, sd=.5sqrt(20)
mean20 = .5*20
sd20 = .5*sqrt(20)
norm_q20 <- 0:20
norm_pdf20 <- dnorm(norm_q20, mean = mean20, sd = sd20)
plot_pmf(norm_q20, norm_pdf20)
lines(seq(0,20,length=100), dnorm(seq(0,20,length=100), mean = mean20, sd = sd20, col = "black"))
# Your code here
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
mean3 = .5*3
sd3 = .5*sqrt(3)
norm_q3 <- 0:3
norm_pdf3 <- dnorm(norm_q3, mean = mean3, sd = sd3)
plot_pmf(norm_q3, norm_pdf3)
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
mean5 = .5*5
sd5 = .5*sqrt(5)
norm_q5 <- 0:5
norm_pdf5 <- dnorm(norm_q5, mean = mean5, sd = sd5)
plot_pmf(norm_q5, norm_pdf5)
#20 flips. n=20, mean=10, sd=.5sqrt(20)
mean20 = .5*20
sd20 = .5*sqrt(20)
norm_q20 <- 0:20
norm_pdf20 <- dnorm(norm_q20, mean = mean20, sd = sd20)
plot_pmf(norm_q20, norm_pdf20)
lines(seq(0,20,length=100), dnorm(seq(0,20,length=100), mean = mean20, sd = sd20), col = "black")
# Your code here
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
mean3 = .5*3
sd3 = .5*sqrt(3)
norm_q3 <- 0:3
norm_pdf3 <- dnorm(norm_q3, mean = mean3, sd = sd3)
plot_pmf(norm_q3, norm_pdf3)
lines(seq(0,3,length=100), dnorm(seq(0,3,length=100), mean = mean3, sd = sd3), col = "black")
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
mean5 = .5*5
sd5 = .5*sqrt(5)
norm_q5 <- 0:5
norm_pdf5 <- dnorm(norm_q5, mean = mean5, sd = sd5)
plot_pmf(norm_q5, norm_pdf5)
lines(seq(0,5,length=100), dnorm(seq(0,5,length=100), mean = mean5, sd = sd5), col = "black")
#20 flips. n=20, mean=10, sd=.5sqrt(20)
mean20 = .5*20
sd20 = .5*sqrt(20)
norm_q20 <- 0:20
norm_pdf20 <- dnorm(norm_q20, mean = mean20, sd = sd20)
plot_pmf(norm_q20, norm_pdf20)
lines(seq(0,20,length=100), dnorm(seq(0,20,length=100), mean = mean20, sd = sd20), col = "black")
set.seed(5292016)
# This code block resets the random seed in order to get consistent results. This will be hidden in the final document, but YOU MUST NOT CHANGE THIS!
set.seed(5292016)
# Your code here
rolls = replicate(2, sample(1:6, 5, replace=TRUE)) #simulate the rolling of two dice
result = pmax(rolls[,1], rolls[,2]) #select the larger value from each roll
result
# This code block resets the random seed in order to get consistent results. This will be hidden in the final document, but YOU MUST NOT CHANGE THIS!
set.seed(5292016)
# Your code here
library(UsingR)
sample(nba.draft$Team, 1, prob=nba.draft$Balls)
#Chicago was the first team selected, and it took 5 trials until Golden State was chosen
# Your code here
p0 = qnorm(0, mean=0, sd=1) #0th percentile (-infinity)
p20 = qnorm(.2, mean=0, sd=1) #20th percentile
p40 = qnorm(.4, mean=0, sd=1) #40th percentile
p60 = qnorm(.6, mean=0, sd=1) #60th percentile
p80 = qnorm(.8, mean=0, sd=1) #80th percentile
p100 = qnorm(1, mean=0, sd=1) #100th percentile (+infinity)
plot_pmf <- function(q, p) {
# This will plot a series of horizontal lines at q with height p, setting
# the y limits to a reasonable heights
plot(q, p, type = "h", xlab = "x", ylab = "probability", main = "pmf", ylim = c(0,
max(p) + 0.1))
# Usually these plots have a dot at the end of the line; the point function
# will add these dots to the plot created above
points(q, p, pch = 16, cex = 2)
}
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
mean3 = .5*3
sd3 = .5*sqrt(3)
norm_q3 <- 0:3
norm_pdf3 <- dnorm(norm_q3, mean = mean3, sd = sd3)
plot_pmf(norm_q3, norm_pdf3)
#overlay normal curve
lines(seq(0,3,length=100), dnorm(seq(0,3,length=100), mean = mean3, sd = sd3), col = "black")
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
mean5 = .5*5
sd5 = .5*sqrt(5)
norm_q5 <- 0:5
norm_pdf5 <- dnorm(norm_q5, mean = mean5, sd = sd5)
plot_pmf(norm_q5, norm_pdf5)
#overlay normal curve
lines(seq(0,5,length=100), dnorm(seq(0,5,length=100), mean = mean5, sd = sd5), col = "black")
#20 flips. n=20, mean=10, sd=.5sqrt(20)
mean20 = .5*20
sd20 = .5*sqrt(20)
norm_q20 <- 0:20
norm_pdf20 <- dnorm(norm_q20, mean = mean20, sd = sd20)
plot_pmf(norm_q20, norm_pdf20)
#overlay normal curve
lines(seq(0,20,length=100), dnorm(seq(0,20,length=100), mean = mean20, sd = sd20), col = "black")
# Your code here
library(UsingR)
sample(nba.draft$Team, 1, prob=nba.draft$Balls)
#Chicago was the first team selected, and it took 5 trials until Golden State was chosen
# Your code here
library(UsingR)
sample(nba.draft$Team, 1, prob=nba.draft$Balls)
#Chicago was the first team selected, and it took 5 trials until Golden State was chosen
# Your code here
library(UsingR)
sample(nba.draft$Team, 1, prob=nba.draft$Balls)
#Chicago was the first team selected, and it took 5 trials until Golden State was chosen
# Your code here
library(UsingR)
sample(nba.draft$Team, 1, prob=nba.draft$Balls)
#Chicago was the first team selected, and it took 5 trials until Golden State was chosen
# Your code here
p0 = qnorm(0, mean=0, sd=1) #0th percentile (-infinity)
p20 = qnorm(.2, mean=0, sd=1) #20th percentile
p40 = qnorm(.4, mean=0, sd=1) #40th percentile
p60 = qnorm(.6, mean=0, sd=1) #60th percentile
p80 = qnorm(.8, mean=0, sd=1) #80th percentile
p100 = qnorm(1, mean=0, sd=1) #100th percentile (+infinity)
print("0th percentile: " + p0)
print("20th percentile: " + p20)
print("40th percentile: " + p40)
print("60th percentile: " + p60)
print("80th percentile: " + p80)
print("100th percentile: " + p100)
# Your code here
p0 = qnorm(0, mean=0, sd=1) #0th percentile (-infinity)
p20 = qnorm(.2, mean=0, sd=1) #20th percentile
p40 = qnorm(.4, mean=0, sd=1) #40th percentile
p60 = qnorm(.6, mean=0, sd=1) #60th percentile
p80 = qnorm(.8, mean=0, sd=1) #80th percentile
p100 = qnorm(1, mean=0, sd=1) #100th percentile (+infinity)
#0th percentile
p0
#20th percentile
p20
#40th percentile
p40
#60th percentile
p60
#80th percentile
p80
#100th percentile
p100
set.seed(5292016)
# This code block resets the random seed in order to get consistent results. This will be hidden in the final document, but YOU MUST NOT CHANGE THIS!
set.seed(5292016)
# Your code here
rolls = replicate(2, sample(1:6, 5, replace=TRUE)) #simulate the rolling of two dice
result = pmax(rolls[,1], rolls[,2]) #select the larger value from each roll
result
# This code block resets the random seed in order to get consistent results. This will be hidden in the final document, but YOU MUST NOT CHANGE THIS!
set.seed(5292016)
# Your code here
library(UsingR)
sample(nba.draft$Team, 1, prob=nba.draft$Balls)
#Chicago was the first team selected, and it took 5 trials until Golden State was chosen
# Your code here
p0 = qnorm(0, mean=0, sd=1) #0th percentile (-infinity)
p20 = qnorm(.2, mean=0, sd=1) #20th percentile
p40 = qnorm(.4, mean=0, sd=1) #40th percentile
p60 = qnorm(.6, mean=0, sd=1) #60th percentile
p80 = qnorm(.8, mean=0, sd=1) #80th percentile
p100 = qnorm(1, mean=0, sd=1) #100th percentile (+infinity)
#0th percentile
p0
#20th percentile
p20
#40th percentile
p40
#60th percentile
p60
#80th percentile
p80
#100th percentile
p100
plot_pmf <- function(q, p) {
# This will plot a series of horizontal lines at q with height p, setting
# the y limits to a reasonable heights
plot(q, p, type = "h", xlab = "x", ylab = "probability", main = "pmf", ylim = c(0,
max(p) + 0.1))
# Usually these plots have a dot at the end of the line; the point function
# will add these dots to the plot created above
points(q, p, pch = 16, cex = 2)
}
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
mean3 = .5*3
sd3 = .5*sqrt(3)
norm_q3 <- 0:3
norm_pdf3 <- dnorm(norm_q3, mean = mean3, sd = sd3)
plot_pmf(norm_q3, norm_pdf3)
#overlay normal curve
lines(seq(0,3,length=100), dnorm(seq(0,3,length=100), mean = mean3, sd = sd3), col = "black")
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
mean5 = .5*5
sd5 = .5*sqrt(5)
norm_q5 <- 0:5
norm_pdf5 <- dnorm(norm_q5, mean = mean5, sd = sd5)
plot_pmf(norm_q5, norm_pdf5)
#overlay normal curve
lines(seq(0,5,length=100), dnorm(seq(0,5,length=100), mean = mean5, sd = sd5), col = "black")
#20 flips. n=20, mean=10, sd=.5sqrt(20)
mean20 = .5*20
sd20 = .5*sqrt(20)
norm_q20 <- 0:20
norm_pdf20 <- dnorm(norm_q20, mean = mean20, sd = sd20)
plot_pmf(norm_q20, norm_pdf20)
#overlay normal curve
lines(seq(0,20,length=100), dnorm(seq(0,20,length=100), mean = mean20, sd = sd20), col = "black")
set.seed(5292016)
# This code block resets the random seed in order to get consistent results. This will be hidden in the final document, but YOU MUST NOT CHANGE THIS!
set.seed(5292016)
# Your code here
rolls = replicate(2, sample(1:6, 5, replace=TRUE)) #simulate the rolling of two dice
result = pmax(rolls[,1], rolls[,2]) #select the larger value from each roll
result
# This code block resets the random seed in order to get consistent results. This will be hidden in the final document, but YOU MUST NOT CHANGE THIS!
set.seed(5292016)
library(UsingR)
# Your code here
sample(nba.draft$Team, 1, prob=nba.draft$Balls)
#Chicago was the first team selected, and it took 5 trials until Golden State was chosen
# Your code here
p0 = qnorm(0, mean=0, sd=1) #0th percentile (-infinity)
p20 = qnorm(.2, mean=0, sd=1) #20th percentile
p40 = qnorm(.4, mean=0, sd=1) #40th percentile
p60 = qnorm(.6, mean=0, sd=1) #60th percentile
p80 = qnorm(.8, mean=0, sd=1) #80th percentile
p100 = qnorm(1, mean=0, sd=1) #100th percentile (+infinity)
#0th percentile
p0
#20th percentile
p20
#40th percentile
p40
#60th percentile
p60
#80th percentile
p80
#100th percentile
p100
plot_pmf <- function(q, p) {
# This will plot a series of horizontal lines at q with height p, setting
# the y limits to a reasonable heights
plot(q, p, type = "h", xlab = "x", ylab = "probability", main = "pmf", ylim = c(0,
max(p) + 0.1))
# Usually these plots have a dot at the end of the line; the point function
# will add these dots to the plot created above
points(q, p, pch = 16, cex = 2)
}
#3 flips. n=3, mean=1.5, sd=.5sqrt(3)
mean3 = .5*3
sd3 = .5*sqrt(3)
norm_q3 <- 0:3
norm_pdf3 <- dnorm(norm_q3, mean = mean3, sd = sd3)
plot_pmf(norm_q3, norm_pdf3)
#overlay normal curve
lines(seq(0,3,length=100), dnorm(seq(0,3,length=100), mean = mean3, sd = sd3), col = "black")
#5 flips. n=5, mean=2.5, sd=.5sqrt(5)
mean5 = .5*5
sd5 = .5*sqrt(5)
norm_q5 <- 0:5
norm_pdf5 <- dnorm(norm_q5, mean = mean5, sd = sd5)
plot_pmf(norm_q5, norm_pdf5)
#overlay normal curve
lines(seq(0,5,length=100), dnorm(seq(0,5,length=100), mean = mean5, sd = sd5), col = "black")
#20 flips. n=20, mean=10, sd=.5sqrt(20)
mean20 = .5*20
sd20 = .5*sqrt(20)
norm_q20 <- 0:20
norm_pdf20 <- dnorm(norm_q20, mean = mean20, sd = sd20)
plot_pmf(norm_q20, norm_pdf20)
#overlay normal curve
lines(seq(0,20,length=100), dnorm(seq(0,20,length=100), mean = mean20, sd = sd20), col = "black")
# Your code here
rolls = replicate(2, sample(1:6, 5, replace=TRUE)) #simulate the rolling of two dice
result = pmax(rolls[,1], rolls[,2]) #select the larger value from each roll
result
# Your code here
rolls = replicate(2, sample(1:6, 5, replace=TRUE)) #simulate the rolling of two dice
result = pmax(rolls[,1], rolls[,2]) #select the larger value from each roll
result
# Your code here
rolls = replicate(2, sample(1:6, 5, replace=TRUE)) #simulate the rolling of two dice
result = pmax(rolls[,1], rolls[,2]) #select the larger value from each roll
result
# Your code here
rolls = replicate(2, sample(1:6, 5, replace=TRUE)) #simulate the rolling of two dice
result = pmax(rolls[,1], rolls[,2]) #select the larger value from each roll
result
# Your code here
rolls = replicate(2, sample(1:6, 5, replace=TRUE)) #simulate the rolling of two dice
result = pmax(rolls[,1], rolls[,2]) #select the larger value from each roll
result
# Your code here
rolls = replicate(2, sample(1:6, 5, replace=TRUE)) #simulate the rolling of two dice
result = pmax(rolls[,1], rolls[,2]) #select the larger value from each roll
result
